AC_PREREQ([2.64])
AC_INIT([erocci],
	[0.5],
	[http://github.com/erocci/erocci/issues],
        [erocci],
        [https://erocci.ow2.org])
AC_CONFIG_MACRO_DIR([m4])

AM_INIT_AUTOMAKE([1.11 -Wall -Wno-portability foreign no-define tar-ustar no-dist-gzip dist-xz])

AX_ERLANG_INIT()

AC_PROG_CC
AC_PROG_RANLIB
AM_PROG_AR
LT_INIT

AC_ARG_ENABLE([xmpp],
	      [AS_HELP_STRING([--disable-xmpp],
	                      [Disable XMPP listener @<:@default: enable@:>@])],
	      [],
	      [enable_xmpp=yes])
AM_CONDITIONAL([XMPP], [test "$enable_xmpp" = "yes"])

AC_ARG_ENABLE([htpasswd],
	      [AS_HELP_STRING([--disable-htpasswd],
	                      [Disable htpasswd based authentication @<:@default: enable@:>@])],
	      [],
	      [enable_htpasswd=yes])
AM_CONDITIONAL([HTPASSWD], [test "$enable_htpasswd" = "yes"])

AC_ARG_ENABLE([erlang-deps],
	      [AS_HELP_STRING([--disable-erlang-deps],
                              [Disable erlang dependancies fetch and build @<:@default: enable@:>@])],
              [],
	      [enable_erlang_deps=yes])
AM_CONDITIONAL([ERL_DEPS], [test "$enable_erlang_deps" = "yes"])

AC_ERLANG_SUBST_INSTALL_LIB_SUBDIR([occi], [${PACKAGE_VERSION}])
AC_ERLANG_SUBST_INSTALL_LIB_SUBDIR([occi_core], [${PACKAGE_VERSION}])
AC_ERLANG_SUBST_INSTALL_LIB_SUBDIR([occi_authnz], [${PACKAGE_VERSION}])
AC_ERLANG_SUBST_INSTALL_LIB_SUBDIR([occi_authnz_htpasswd], [${PACKAGE_VERSION}])
AC_ERLANG_SUBST_INSTALL_LIB_SUBDIR([occi_listener_http], [${PACKAGE_VERSION}])
AC_ERLANG_SUBST_INSTALL_LIB_SUBDIR([occi_backend_mnesia], [${PACKAGE_VERSION}])

if test "x$enable_xmpp" = "xyes"; then
   AC_ERLANG_SUBST_INSTALL_LIB_SUBDIR([occi_listener_xmpp], [${PACKAGE_VERSION}])
   AX_ERLANG_DEP([erim],  [$enable_erlang_deps],
                 [git], [git://github.com/lizenn/erim.git])
   AX_ERLANG_DEP([dnssd], [$enable_erlang_deps],
                 [git], [git://github.com/benoitc/dnssd_erlang.git])

   PKG_CHECK_MODULES([avahi_compat_libdns_sd], [avahi-compat-libdns_sd])
fi

if test "x$enable_htpasswd" = "xyes"; then
   AC_ERLANG_SUBST_INSTALL_LIB_SUBDIR([occi_authnz_htpasswd], [${PACKAGE_VERSION}])

   AC_MSG_CHECKING([for libaprutil1 (apr_md5.h)])
   if which apu-config > /dev/null; then
      AC_SUBST([APRUTIL_CFLAGS], [`apr-config --includes`])
      AC_SUBST([APRUTIL_LDFLAGS], [`apr-config --ldflags`])
      AC_MSG_RESULT([ok])
   else
      AC_MSG_ERROR([not found])
   fi
fi

AX_ERLANG_DEP([cowboy],                 [$enable_erlang_deps],
	      [git], [git://github.com/extend/cowboy.git], [1.0.0])
AX_ERLANG_DEP([jiffy],                  [$enable_erlang_deps],
              [git], [git://github.com/davisp/jiffy.git], [0.9.0])
AX_ERLANG_DEP([erim_xml],               [$enable_erlang_deps],
              [git], [git://github.com/lizenn/erim_xml.git])
AX_ERLANG_DEP([uuid],                   [$enable_erlang_deps],
              [git], [git://gitorious.org/avtobiff/erlang-uuid.git], [v0.4.6])
AX_ERLANG_DEP([uri],                    [$enable_erlang_deps],
              [git], [git://github.com/heroku/uri.git])

AC_CHECK_PROGS([REBAR], [rebar])
AS_IF([test x$enable_erlang_deps = xyes], [AC_CHECK_PROGS([GIT], [git])])

AS_IF([test x$enable_htpasswd = xyes], [
   AC_ERLANG_CHECK_LIB([erl_interface])
   AC_SUBST([ERL_CFLAGS], ["-I${ERLANG_ROOT_DIR}/erts-${ERLANG_ERTS_VER}/include -I${ERLANG_LIB_DIR_erl_interface}/include"])
   AC_SUBST([ERL_LDFLAGS], ["-L${ERLANG_LIB_DIR_erl_interface}/lib -lerl_interface -lei"])
])

AC_CONFIG_FILES([
	Makefile
	apps/Makefile
	apps/core/Makefile
	apps/authnz/Makefile
	apps/listener_http/Makefile
	apps/listener_xmpp/Makefile
	apps/authnz_htpasswd/Makefile
	apps/authnz_htpasswd/c_src/Makefile
	apps/backend_mnesia/Makefile
])

AC_OUTPUT

get_apps () {
    for app in $(echo -e "subdirs:\n\t@echo \$(SUBDIRS)\n\ninclude ./apps/Makefile" | make -f - subdirs); do
      echo $app
    done
}

get_plugins () {
    get_apps | awk -e '/^'$1'_/ { sub(/^'$1'_/,""); print }'
}

listeners=$(get_plugins listener)
backends=$(get_plugins backend)
authnz=$(get_plugins authnz)
echo "************************************************************************"
echo " erocci configuration is now complete."
echo ""
echo "************************************************************************"
echo ""
echo "Enabled components:"
echo "    listeners : "$listeners
echo "    backends  : "$backends
echo "    authnz    : "$authnz
echo ""
